version: "3.9"

services:
  # ---------- Messaging ----------
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports: [ "2181:2181" ]

  kafka:
    image: bitnami/kafka:3.7
    depends_on: [ zookeeper ]
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_LISTENER_PORT}
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_LISTENER_PORT}
    ports: [ "${KAFKA_LISTENER_PORT}:9092" ]

  # ---------- Database ----------
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: [ "5432:5432" ]
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./sql/init_raw_news.sql:/docker-entrypoint-initdb.d/init_raw_news.sql

  # ---------- Cache ----------
  redis:
    image: redis:7
    ports: [ "${REDIS_PORT}:6379" ]

  # ---------- Monitoring ----------
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports: [ "9090:9090" ]

  grafana:
    image: grafana/grafana-oss:10.4.1
    depends_on: [ prometheus ]
    ports: [ "3000:3000" ]
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # ---------- Scraping ----------
  scraper:
    build: ../scraper
    env_file:
      - ../scraper/.env
    command: uvicorn main:app --host 0.0.0.0 --port 8001
    depends_on:
      - timescaledb
    ports:
      - "8001:8001"
      
  # ---------- Mapper ----------
  mapper:
    build: ../scraper
    command: ["python", "mapper.py"]
    env_file:
      - ../scraper/.env
    depends_on:
      - timescaledb
  
  nlp_worker:
    build:
      context: ../scraper        # same image as scraper/mapper
    command: ["python", "nlp_worker.py"]
    env_file:
      - ../scraper/.env
    depends_on:
      - timescaledb
  
  price_worker:
    build:
      context: ../scraper
      dockerfile: price_worker.Dockerfile
    container_name: price_worker
    depends_on:
      - timescaledb
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@timescaledb:5432/newsdb
      - PRICE_SYMBOLS=AAPL,MSFT,GOOGL,AMZN,TSLA
    command: ["python", "-u", "price_worker.py"]
    ports:
      - "8010:8010"        # Prometheus metrics

  analytics:
    build:
      context: ../analytics
    container_name: analytics
    depends_on:
      - timescaledb
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@timescaledb:5432/newsdb
    ports:
      - "8020:8020"

  signal_worker:
    build:
      context: ..
      dockerfile: signal_worker.Dockerfile
    depends_on:
      - timescaledb
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@timescaledb:5432/newsdb
      - PRICE_SYMBOLS=${PRICE_SYMBOLS:-AAPL,MSFT,GOOGL,AMZN,TSLA}
    restart: unless-stopped


    
volumes:
  timescale-data:
  grafana-data:
